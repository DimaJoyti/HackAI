version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: hackai-postgres
    environment:
      POSTGRES_DB: hackai
      POSTGRES_USER: hackai
      POSTGRES_PASSWORD: hackai_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hackai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hackai -d hackai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache
  redis:
    image: redis:7-alpine
    container_name: hackai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hackai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Observability
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: hackai-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - hackai-network

  prometheus:
    image: prom/prometheus:latest
    container_name: hackai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hackai-network

  grafana:
    image: grafana/grafana:latest
    container_name: hackai-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - hackai-network

  # Backend Services
  api-gateway:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.gateway
    container_name: hackai-gateway
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hackai
      - DB_USER=hackai
      - DB_PASSWORD=hackai_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hackai-network
    restart: unless-stopped

  user-service:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.user
    container_name: hackai-user-service
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hackai
      - DB_USER=hackai
      - DB_PASSWORD=hackai_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hackai-network
    restart: unless-stopped

  scanner-service:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.scanner
    container_name: hackai-scanner-service
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hackai
      - DB_USER=hackai
      - DB_PASSWORD=hackai_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hackai-network
    restart: unless-stopped

  network-service:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.network
    container_name: hackai-network-service
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hackai
      - DB_USER=hackai
      - DB_PASSWORD=hackai_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hackai-network
    restart: unless-stopped

  threat-service:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.threat
    container_name: hackai-threat-service
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hackai
      - DB_USER=hackai
      - DB_PASSWORD=hackai_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hackai-network
    restart: unless-stopped

  log-service:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.log
    container_name: hackai-log-service
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hackai
      - DB_USER=hackai
      - DB_PASSWORD=hackai_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hackai-network
    restart: unless-stopped

  # Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: hackai-web
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    depends_on:
      - api-gateway
    networks:
      - hackai-network
    restart: unless-stopped

networks:
  hackai-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
