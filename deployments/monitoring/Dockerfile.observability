# Build stage
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the observability server
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o observability-server \
    ./cmd/observability-server

# Final stage
FROM alpine:3.18

# Install runtime dependencies
RUN apk --no-cache add ca-certificates curl

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/observability-server .

# Copy configuration files
COPY --from=builder /app/configs ./configs

# Create directories for data
RUN mkdir -p /app/data /app/logs && \
    chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 8090 8091 8092 8093

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8090/health || exit 1

# Set environment variables
ENV SERVICE_NAME=hackai-observability
ENV SERVICE_VERSION=1.0.0
ENV LOG_LEVEL=info
ENV HEALTH_PORT=8090
ENV METRICS_PORT=8091
ENV DASHBOARD_PORT=8092
ENV PROFILING_PORT=8093

# Run the observability server
CMD ["./observability-server"]
