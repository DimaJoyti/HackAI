version: '3.8'

services:
  # Core API Gateway
  api-gateway:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.api-gateway
      args:
        VERSION: ${VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME}
        COMMIT_HASH: ${COMMIT_HASH}
    image: hackai/api-gateway:${VERSION:-latest}
    container_name: hackai-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090" # Metrics
    environment:
      - ENV=production
      - LOG_LEVEL=info
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - OTEL_EXPORTER_JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
      - PROMETHEUS_ENDPOINT=0.0.0.0:9090
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - hackai-network
    volumes:
      - ./configs/api-gateway.yml:/app/config.yml:ro
      - api-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Threat Intelligence Service
  threat-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.threat
      args:
        VERSION: ${VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME}
        COMMIT_HASH: ${COMMIT_HASH}
    image: hackai/threat-service:${VERSION:-latest}
    container_name: hackai-threat-service
    restart: unless-stopped
    ports:
      - "8081:8080"
      - "9091:9090" # Metrics
    environment:
      - ENV=production
      - LOG_LEVEL=info
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - MITRE_API_KEY=${MITRE_API_KEY}
      - NVD_API_KEY=${NVD_API_KEY}
      - OTEL_EXPORTER_JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - hackai-network
    volumes:
      - ./configs/threat-service.yml:/app/config.yml:ro
      - threat-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security Monitoring Service
  security-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.security
      args:
        VERSION: ${VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME}
        COMMIT_HASH: ${COMMIT_HASH}
    image: hackai/security-service:${VERSION:-latest}
    container_name: hackai-security-service
    restart: unless-stopped
    ports:
      - "8082:8080"
      - "9092:9090" # Metrics
    environment:
      - ENV=production
      - LOG_LEVEL=info
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OTEL_EXPORTER_JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - hackai-network
    volumes:
      - ./configs/security-service.yml:/app/config.yml:ro
      - security-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics and Reporting Service
  analytics-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.analytics
      args:
        VERSION: ${VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME}
        COMMIT_HASH: ${COMMIT_HASH}
    image: hackai/analytics-service:${VERSION:-latest}
    container_name: hackai-analytics-service
    restart: unless-stopped
    ports:
      - "8083:8080"
      - "9093:9090" # Metrics
    environment:
      - ENV=production
      - LOG_LEVEL=info
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OTEL_EXPORTER_JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - hackai-network
    volumes:
      - ./configs/analytics-service.yml:/app/config.yml:ro
      - analytics-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Application
  web:
    build:
      context: ../../web
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: ${API_URL}
        NEXT_PUBLIC_WS_URL: ${WS_URL}
        NEXT_PUBLIC_ENV: production
    image: hackai/web:${VERSION:-latest}
    container_name: hackai-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL}
      - NEXT_PUBLIC_WS_URL=${WS_URL}
    depends_on:
      - api-gateway
    networks:
      - hackai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hackai-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-hackai}
      - POSTGRES_USER=${POSTGRES_USER:-hackai}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - hackai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hackai} -d ${POSTGRES_DB:-hackai}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hackai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - hackai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hackai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - web
      - api-gateway
    networks:
      - hackai-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hackai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - hackai-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hackai-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - hackai-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: hackai-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger-data:/tmp
    networks:
      - hackai-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  hackai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  jaeger-data:
    driver: local
  api-logs:
    driver: local
  threat-logs:
    driver: local
  security-logs:
    driver: local
  analytics-logs:
    driver: local
  nginx-logs:
    driver: local
