# Base Dockerfile for HackAI Go services
# Multi-stage build for optimized production images

# Build stage
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build arguments
ARG SERVICE_NAME
ARG VERSION=dev
ARG BUILD_TIME
ARG COMMIT_HASH

# Build the application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s -X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.CommitHash=${COMMIT_HASH}" \
    -o /app/bin/${SERVICE_NAME} \
    ./cmd/${SERVICE_NAME}

# Production stage
FROM alpine:3.18

# Install runtime dependencies
RUN apk --no-cache add ca-certificates tzdata curl

# Create non-root user
RUN addgroup -g 1001 -S hackai && \
    adduser -u 1001 -S hackai -G hackai

# Set working directory
WORKDIR /app

# Copy binary from builder stage
ARG SERVICE_NAME
COPY --from=builder /app/bin/${SERVICE_NAME} /app/service

# Copy configuration files
COPY --from=builder /app/configs /app/configs

# Set ownership
RUN chown -R hackai:hackai /app

# Switch to non-root user
USER hackai

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8080}/health || exit 1

# Expose port
EXPOSE ${PORT:-8080}

# Run the application
CMD ["/app/service"]
