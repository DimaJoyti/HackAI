apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-mcp-service
  namespace: hackai
  labels:
    app: security-mcp-service
    component: security
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: security-mcp-service
  template:
    metadata:
      labels:
        app: security-mcp-service
        component: security
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9087"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: security-mcp-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: security-mcp-service
        image: hackai/security-mcp-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 9087
          protocol: TCP
        env:
        - name: CONFIG_PATH
          value: "/app/configs"
        - name: LOG_LEVEL
          value: "info"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: url
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        - name: OTEL_SERVICE_NAME
          value: "security-mcp-service"
        - name: OTEL_SERVICE_VERSION
          value: "1.0.0"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: config-volume
        configMap:
          name: security-mcp-config
      - name: logs-volume
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: security-mcp-service
  namespace: hackai
  labels:
    app: security-mcp-service
    component: security
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9087
    targetPort: http
    protocol: TCP
  selector:
    app: security-mcp-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-mcp-service
  namespace: hackai
  labels:
    app: security-mcp-service
    component: security

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: security-mcp-service
  namespace: hackai
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: security-mcp-service
  namespace: hackai
subjects:
- kind: ServiceAccount
  name: security-mcp-service
  namespace: hackai
roleRef:
  kind: Role
  name: security-mcp-service
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-mcp-config
  namespace: hackai
  labels:
    app: security-mcp-service
    component: security
data:
  config.yaml: |
    server:
      host: "0.0.0.0"
      port: "9087"
      read_timeout: "30s"
      write_timeout: "30s"
      idle_timeout: "60s"
      cors:
        allowed_origins: ["*"]
        allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
        allowed_headers: ["*"]
        exposed_headers: ["X-Request-ID"]
        allow_credentials: false
        max_age: 86400

    observability:
      tracing:
        enabled: true
        endpoint: "http://jaeger-collector:14268/api/traces"
        service_name: "security-mcp-service"
        service_version: "1.0.0"
        sample_rate: 1.0
      metrics:
        enabled: true
        endpoint: "http://prometheus:9090"
        push_interval: "15s"
      logging:
        level: "info"
        format: "json"
        output: "stdout"
        add_source: true

    security:
      mcp:
        server_name: "HackAI Security MCP Server"
        server_version: "1.0.0"
        max_concurrent_scans: 10
        scan_timeout: "5m"
        enable_realtime_alerts: true
        threat_threshold: 0.7
        log_level: "info"
        enable_audit_logging: true

    database:
      driver: "postgres"
      max_open_conns: 25
      max_idle_conns: 5
      conn_max_lifetime: "5m"
      conn_max_idle_time: "1m"

    redis:
      max_retries: 3
      retry_delay: "1s"
      pool_size: 10
      min_idle_conns: 5
      dial_timeout: "5s"
      read_timeout: "3s"
      write_timeout: "3s"
      pool_timeout: "4s"
      idle_timeout: "5m"

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: security-mcp-service-netpol
  namespace: hackai
spec:
  podSelector:
    matchLabels:
      app: security-mcp-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: hackai
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 9087
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: hackai
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 14268  # Jaeger
  - to: []
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
    - protocol: TCP
      port: 443  # HTTPS
