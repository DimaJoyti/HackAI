'use client'

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import {
  ShieldCheckIcon,
  PlayIcon,
  PauseIcon,
  StopIcon,
  EyeIcon,
  TrashIcon,
} from '@heroicons/react/24/outline'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { Progress } from '@/components/ui/progress'
import { formatDateTime, formatRelativeTime } from '@/lib/utils'
import { toast } from 'react-hot-toast'

const scanSchema = z.object({
  target: z.string().url('Please enter a valid URL'),
  scanType: z.string().min(1, 'Please select a scan type'),
  description: z.string().optional(),
})

type ScanForm = z.infer<typeof scanSchema>

// Mock data
const mockScans = [
  {
    id: '1',
    target: 'https://example.com',
    scanType: 'web',
    status: 'completed',
    progress: 100,
    vulnerabilities: 8,
    criticalCount: 2,
    highCount: 3,
    mediumCount: 2,
    lowCount: 1,
    startedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),
    completedAt: new Date(Date.now() - 1.5 * 60 * 60 * 1000),
    duration: 30 * 60 * 1000, // 30 minutes
  },
  {
    id: '2',
    target: 'https://api.example.com',
    scanType: 'api',
    status: 'running',
    progress: 65,
    startedAt: new Date(Date.now() - 30 * 60 * 1000),
  },
  {
    id: '3',
    target: 'https://test.example.com',
    scanType: 'web',
    status: 'failed',
    progress: 45,
    startedAt: new Date(Date.now() - 4 * 60 * 60 * 1000),
    error: 'Connection timeout',
  },
]

export default function VulnerabilityScanPage() {
  const [isStartingScan, setIsStartingScan] = useState(false)
  const [scans, setScans] = useState(mockScans)

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    setValue,
    watch,
  } = useForm<ScanForm>({
    resolver: zodResolver(scanSchema),
  })

  const onSubmit = async (data: ScanForm) => {
    setIsStartingScan(true)
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      const newScan = {
        id: Date.now().toString(),
        target: data.target,
        scanType: data.scanType,
        status: 'running' as const,
        progress: 0,
        startedAt: new Date(),
      }
      
      setScans(prev => [newScan, ...prev])
      toast.success('Vulnerability scan started successfully!')
      reset()
    } catch (error) {
      toast.error('Failed to start scan. Please try again.')
    } finally {
      setIsStartingScan(false)
    }
  }

  const handleCancelScan = async (scanId: string) => {
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 500))
      
      setScans(prev => prev.map(scan => 
        scan.id === scanId 
          ? { ...scan, status: 'cancelled' as const }
          : scan
      ))
      toast.success('Scan cancelled successfully')
    } catch (error) {
      toast.error('Failed to cancel scan')
    }
  }

  const handleDeleteScan = async (scanId: string) => {
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 500))
      
      setScans(prev => prev.filter(scan => scan.id !== scanId))
      toast.success('Scan deleted successfully')
    } catch (error) {
      toast.error('Failed to delete scan')
    }
  }

  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case 'running':
        return 'running'
      case 'completed':
        return 'completed'
      case 'failed':
        return 'failed'
      case 'cancelled':
        return 'cancelled'
      default:
        return 'secondary'
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'text-red-600'
      case 'high':
        return 'text-orange-600'
      case 'medium':
        return 'text-yellow-600'
      case 'low':
        return 'text-blue-600'
      default:
        return 'text-gray-600'
    }
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center space-x-3">
        <ShieldCheckIcon className="h-8 w-8 text-blue-600" />
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            Vulnerability Scanning
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            Discover and analyze security vulnerabilities in web applications and APIs
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Scan Configuration */}
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle>Start New Scan</CardTitle>
              <CardDescription>
                Configure and launch a vulnerability scan
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                <div>
                  <Label htmlFor="target">Target URL</Label>
                  <Input
                    id="target"
                    type="url"
                    placeholder="https://example.com"
                    {...register('target')}
                    className={errors.target ? 'border-red-500' : ''}
                  />
                  {errors.target && (
                    <p className="mt-1 text-sm text-red-600">{errors.target.message}</p>
                  )}
                </div>

                <div>
                  <Label htmlFor="scanType">Scan Type</Label>
                  <Select onValueChange={(value) => setValue('scanType', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select scan type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="web">Web Application</SelectItem>
                      <SelectItem value="api">API Endpoint</SelectItem>
                      <SelectItem value="ssl">SSL/TLS</SelectItem>
                      <SelectItem value="directory">Directory Enumeration</SelectItem>
                    </SelectContent>
                  </Select>
                  {errors.scanType && (
                    <p className="mt-1 text-sm text-red-600">{errors.scanType.message}</p>
                  )}
                </div>

                <div>
                  <Label htmlFor="description">Description (Optional)</Label>
                  <Textarea
                    id="description"
                    placeholder="Add notes about this scan..."
                    {...register('description')}
                    rows={3}
                  />
                </div>

                <Button
                  type="submit"
                  className="w-full"
                  loading={isStartingScan}
                  disabled={isStartingScan}
                >
                  <PlayIcon className="h-4 w-4 mr-2" />
                  Start Scan
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>

        {/* Scan Results */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Scan History</CardTitle>
              <CardDescription>
                View and manage your vulnerability scans
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {scans.length === 0 ? (
                  <div className="text-center py-8">
                    <ShieldCheckIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">No scans yet. Start your first scan!</p>
                  </div>
                ) : (
                  scans.map((scan) => (
                    <div key={scan.id} className="border rounded-lg p-4 space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div>
                            <p className="font-medium">{scan.target}</p>
                            <p className="text-sm text-gray-500">
                              {scan.scanType} scan â€¢ {formatRelativeTime(scan.startedAt)}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge variant={getStatusBadgeVariant(scan.status)}>
                            {scan.status}
                          </Badge>
                          <div className="flex space-x-1">
                            {scan.status === 'completed' && (
                              <Button size="sm" variant="outline">
                                <EyeIcon className="h-4 w-4" />
                              </Button>
                            )}
                            {scan.status === 'running' && (
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleCancelScan(scan.id)}
                              >
                                <StopIcon className="h-4 w-4" />
                              </Button>
                            )}
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handleDeleteScan(scan.id)}
                            >
                              <TrashIcon className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>

                      {scan.status === 'running' && (
                        <div>
                          <div className="flex justify-between text-sm mb-1">
                            <span>Progress</span>
                            <span>{scan.progress}%</span>
                          </div>
                          <Progress value={scan.progress} className="h-2" />
                        </div>
                      )}

                      {scan.status === 'completed' && scan.vulnerabilities !== undefined && (
                        <div className="grid grid-cols-2 md:grid-cols-5 gap-2 text-sm">
                          <div className="text-center p-2 bg-gray-50 dark:bg-gray-800 rounded">
                            <div className="font-medium">{scan.vulnerabilities}</div>
                            <div className="text-gray-500">Total</div>
                          </div>
                          <div className="text-center p-2 bg-red-50 dark:bg-red-900/20 rounded">
                            <div className="font-medium text-red-600">{scan.criticalCount}</div>
                            <div className="text-gray-500">Critical</div>
                          </div>
                          <div className="text-center p-2 bg-orange-50 dark:bg-orange-900/20 rounded">
                            <div className="font-medium text-orange-600">{scan.highCount}</div>
                            <div className="text-gray-500">High</div>
                          </div>
                          <div className="text-center p-2 bg-yellow-50 dark:bg-yellow-900/20 rounded">
                            <div className="font-medium text-yellow-600">{scan.mediumCount}</div>
                            <div className="text-gray-500">Medium</div>
                          </div>
                          <div className="text-center p-2 bg-blue-50 dark:bg-blue-900/20 rounded">
                            <div className="font-medium text-blue-600">{scan.lowCount}</div>
                            <div className="text-gray-500">Low</div>
                          </div>
                        </div>
                      )}

                      {scan.status === 'failed' && scan.error && (
                        <div className="p-2 bg-red-50 dark:bg-red-900/20 rounded text-sm text-red-600">
                          Error: {scan.error}
                        </div>
                      )}
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
